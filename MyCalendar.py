# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.4 on Mon Mar 13 10:01:52 2023
#

import wx
import json
import os
from Ajout import Ajout
from Exporter import Exporter
from cal_setup import get_calendar_service
# begin wxGlade: dependencies
import wx.adv
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyCalendar(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyCalendar.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((550, 300))
        self.SetTitle("My Calendar")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("img\\gestionnaire_calendar.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.window_1 = wx.SplitterWindow(self.panel_1, wx.ID_ANY)
        self.window_1.SetMinimumPaneSize(20)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)

        self.window_1_pane_1 = wx.Panel(self.window_1, wx.ID_ANY)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)

        label_1 = wx.StaticText(self.window_1_pane_1, wx.ID_ANY, "Liste des topics", style=wx.ALIGN_CENTER_HORIZONTAL)
        label_1.SetMinSize((250, 30))
        label_1.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_4.Add(label_1, 0, wx.ALL, 12)

        self.check_list_box_topics = wx.CheckListBox(self.window_1_pane_1, wx.ID_ANY, choices=["Vacances_(Zone_A)", "Vacances_(Zone_B)", "Vacances_(Zone_C)", "Jours_Feries", "Test1", "Test2"])
        sizer_4.Add(self.check_list_box_topics, 0, wx.EXPAND | wx.SHAPED, 0)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_5, 1, wx.EXPAND, 0)

        self.btnGoogle = wx.Button(self.window_1_pane_1, wx.ID_ANY, u"Connexion √† Google")
        sizer_5.Add(self.btnGoogle, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND | wx.SHAPED, 0)

        self.imgGoogle = wx.StaticBitmap(self.window_1_pane_1, wx.ID_ANY, wx.Bitmap("./img/F.png", wx.BITMAP_TYPE_ANY))
        sizer_5.Add(self.imgGoogle, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND | wx.SHAPED, 0)

        self.window_1_pane_2 = wx.Panel(self.window_1, wx.ID_ANY)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        self.calendar = wx.adv.GenericCalendarCtrl(self.window_1_pane_2, wx.ID_ANY)
        sizer_2.Add(self.calendar, 0, wx.EXPAND, 0)

        sizer_3 = wx.GridSizer(1, 2, 0, 0)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)

        self.btnAdd = wx.Button(self.window_1_pane_2, wx.ID_ANY, "Ajout ...")
        sizer_3.Add(self.btnAdd, 0, wx.EXPAND, 0)

        self.btn_exporter = wx.Button(self.window_1_pane_2, wx.ID_ANY, "Exporter")
        sizer_3.Add(self.btn_exporter, 0, wx.EXPAND, 0)

        self.window_1_pane_2.SetSizer(sizer_2)

        self.window_1_pane_1.SetSizer(sizer_4)

        self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.ConnGoogle, self.btnGoogle)
        self.Bind(wx.EVT_BUTTON, self.OnAdd, self.btnAdd)
        self.Bind(wx.EVT_BUTTON, self.OnExport, self.btn_exporter)
        # end wxGlade

    def OnAdd(self, event):  # wxGlade: MyCalendar.<event_handler>
        addDialog = Ajout(self)
        result = addDialog.ShowModal()
        if(result == wx.ID_OK):
            self.lblReturn.SetLabelText(addDialog.txtEvt.GetValue())


    def ConnGoogle(self, event):  # wxGlade: MyCalendar.<event_handler>
        print("Connexion Google")
        get_calendar_service()
        # changement source image google connexion (üëå)
        self.imgGoogle.SetBitmap (wx.Bitmap("img\V.png"))
        print("Fin Connexion Google")
        

    def OnExport(self, event):  # wxGlade: MyCalendar.<event_handler>

        # Supprimer le json m√©lang√©
        mergedJson = "json\mergedJson.json"
        with open(mergedJson, "w") as file:
            # √âcrire un objet JSON vide dans le fichier
            json.dump({}, file)
        mergedJsonValue = None
        # Fin Supprimer le json m√©lang√©

        # Compiler les json selectionn√©s
        directory_path = os.path.abspath("json/topics")
        files_list = os.listdir(directory_path)
        json_paths = []
        
        for file_name in files_list:
            json_paths.append(file_name)

        print(json_paths)
        
        # Fin compilation

        # Debut test
        selected_topics = self.check_list_box_topics.GetCheckedStrings()
        print(f"Topics s√©lectionn√©s : {selected_topics}")
        for topic in selected_topics:
            print("+",topic)
            pathJson = "json/topics/"+topic+".json"
            print (pathJson)
            with open(pathJson, "r") as file:
                if mergedJsonValue == None : 
                    mergedJsonValue = json.load(file)
                
                else:
                    mergedJsonValue = mergedJsonValue,json.load(file)
            

        with open('json\mergedJson.json', 'w') as f:
            json.dump(mergedJsonValue, f)
        print("mergedJson = ",mergedJsonValue)
        file.close()
        # Fin des tests
        addDialog = Exporter(self)
        result = addDialog.ShowModal()
        if(result == wx.ID_OK):
            self.lblReturn.SetLabelText(addDialog.txtEvt.GetValue())
    


# end of class MyCalendar
